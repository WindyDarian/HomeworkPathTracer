Recorded Data:
All without TBB enabled











Extra credits:

1.SAH:

raytracing/bvhnode.h

Referenced p217 of physically based rendering 2nd edition
I divide each node into several buckets and estimate costs of intersection test
when splitting from each bucket then choose the minimum one as the split plane.
estimated cost for one side
    = surface area(relative) * object count (traversal cost ignored)


Times for my SAH
  many_spheres.xml(4x4 uniform, no TBB) with SPLIT_EQUAL_COUNTS 48.235s
  many_spheres.xml(4x4 uniform, no TBB) with SPLIT_SAH 46.721s
  Wahoo.xml(4x4 uniform, no TBB) with SPLIT_EQUAL_COUNTS 48.739s
  Wahoo.xml(4x4 uniform, no TBB) with SPLIT_SAH 40.992s
  glass_dragon.xml(4x4 uniform, no TBB) with SPLIT_EQUAL_COUNTS 202.929s
  glass_dragon.xml(4x4 uniform, no TBB) with SPLIT_SAH 153.790s



2.Image-Wide Stratified Sampling:

raytracing/samplers/imagewidestratifiedsampler.h

min_distance for n*n sampler as 1/(2n),
MIN_TRIES for each sample is 4, return point with max distance to other all points
for each sample among the 4~100 tries

(If the 100th(MAX_TRIES) attempt still have a distance to all other samples
greater than min_distance then the point with the max distance in the 100 tries
 will be returned)

To calculate the min distance to all other samples in the image:
 I constructed the sample grid in column major order from top-left to
 bottom-right, so for each sample I only needs to check distance with points
 satisfying one of these requirements:
  1) samples in the current pixel;
  2) samples in the right side (<min_distance to right edge) of the left pixel;
  3) samples in the bottom side (<min_distance to right edge) of the upper pixel;
  4) samples in the bottom-right of the upper-left pixel
  5) samples in the top-right of the down-left pixel


Image-Wide Stratified Sampler creation costs:

  4x4 11.230 seconds

for up to 4x4 AA, this method is fine for now, I may use a K-D Tree to store and
compare points or store sample points in a data file as improvement when larger
resolution or AA level is needed.










This log is maintained by a human....
So...

Many_Spheres before optimizing my last raytracer and kdtree
(4 * random AA)
172.12 seconds
Many_Spheres before optimizing my last raytracer and kdtree
(4 * stratified AA)
170.67 seconds

Many_Spheres after optimizing my last raytracer but not kdtree
(4 * stratified AA)
47.782 seconds

Many_Spheres after sah
(4 * stratified AA)
47.782 seconds

glass_dragon without sah
12.701 seconds

glass_dragon with sah
9.61 seconds



44 seconds?~

4x:

Wahoo 用深度优先检测 53.841s
Wahoo 用笨办法 54.508s
嘛

Wahoo SAH 40.992s
Wahoo NoSAH 48.739s

glass_dragon NoSAH 202.929s
glass_dragon SAH 153.790s

Image-Wide Stratified Sampler Construction Time:

4x4 11.230 seconds


(min distance for n*n sampler as 1./2n,
 min tries for each sample is 4, return point with max distance to other all points
 for each sample among the 4~100 tries)




预先知道的一点是，Many Spheres 用窝的方法会导致很多不能分割的东西所以
